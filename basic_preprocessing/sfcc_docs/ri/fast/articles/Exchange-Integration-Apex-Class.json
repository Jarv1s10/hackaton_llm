{
    "site_name": "Revenue Grid Knowledge Base",
    "short_site_name": "Sfcc",
    "doc_dir": "ri/fast/articles/Exchange-Integration-Apex-Class.md",
    "doc_url": "https://docs.revenuegrid.com/ri/fast/articles/Exchange-Integration-Apex-Class",
    "title": null,
    "full_content": "---\ndescription: Detailed explanation of how RG Email Sidebar establishes interaction with MS Exchange via a dedicated Apex class\n---\n# MS Exchange Integration via Apex Class  \n  \n\n<i>For users of the Email Sidebar on:</i><br><br>\n<div class=\"container\" style=\"display: inline-block; height: 42px; width: 162px; padding: 5px 10px; background-color: #fff;\"><img src=\"https://revenuegrid.com/revenue-inbox/wp-content/uploads/Exchange1.svg\" style=\"height: 100%; object-fit: contain; vertical-align: middle;\"></div>\n&nbsp;\n\n*3 min read*  \n\n<!-- ShareThis BEGIN --> \n<div class=\"addthis_inline_share_toolbox\"></div>\n<!-- End ShareThis --> \n\n&nbsp;\n\nBesides [custom API endpoints](../Lightning-Scheduler-API/), {{ product_name }} can establish interaction with MS Exchange via a dedicated Apex class.\n\n### MS Exchange calendar actions performed using Apex class methods\n\n- Read, Create, Delete calendar items on MS Exchange servers. This also includes: attendees availability spans parsing from their calendars; adding a booked meeting into attendees' calendars; reserving chosen time slots  \n- Checking if the above listed actions were performed successfully; troubleshooting possible errors, e.g. Exchange data access issues  \n\n&nbsp;\n\n&nbsp;\n\n**Special notes:**\n\nAll date and time properties in the calls and responses are set in the [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601): **YYYY-MM-DDThh:mm:ssZ**\n\nAll input and output dates and times are set in GMT time zone.\n\n&nbsp;\n\n&nbsp;\n\n### Access authorization token\n\nAccess authorization required to work with MS Exchange data is granted using an *access_token* acquired by [{{ company_name }} Sync Engine](../Synchronization-Engine-An-Overview/).\n\n&nbsp;\n\n&nbsp;\n\n\n\n### Apex Class Methods (Revised)\n\n&nbsp;\n\n#### Method getTimeSlotsFromOutlook\n\nUse this method to retrieve an access URL value required to perform actions on calendars.\n\nMethod use sample:\n\n*Parameters*  \n\n- **startDateTime** start of availability dates/time span defining the period during which a meeting is possible, e.g. *2020-10-15T00:00:00Z*  \n- **endDateTime** end of availability dates/time span defining the period during which a meeting is possible, e.g. *2020-10-17T12:00:00Z*  \n- **emailsToCheckAvailability** the list of email addresses whose calendar availability you want to retrieve. They should belong to your MS Exchange Org. Example:  \n   List<String> emailsToCheckAvailability = new list<String> { 'colleague1@mycompany.com' , 'colleague2@mycompany.com' }   \n- **accessToken** the *access_token* string acquired by {{ short_name }} Sync Engine to access MS Exchange data  \n- **tenant** Sync URL specific to the tenant allocated for your Organization, e.g. *https://lsa-staging-sync.revenuegrid.com*\n\n\n\n\n````\n\nglobal static void getTimeSlotsFromOutlook(Datetime startDateTime, Datetime endDateTime, List<String> emailsToCheckAvailability, String accessToken, String tenant)\n{\nHttpResponse resp = request\n(\ngetUrl(startDateTime, endDateTime, tenant),\n'POST',\ngetAuthHeader(accessToken),\ngetBodyAvailability(emailsToCheckAvailability),\n'getTimeSlots',\nnull,\n'SM001_getTimeSlotsMock'\n);\nSystem.debug('resp.getBody()' + resp.getBody());\n}\n````\n\n\n&nbsp;\n\n* * *\n\n&nbsp;\n\n\n\n#### Method createOutlookEvent\n\nUse this method to create calendar items in MS Exchange.\n\nMethod use sample:\n\n*Parameters*    \n\n- **accessToken** the *access_token* string acquired by {{ short_name }} Sync Engine to access MS Exchange data  **URL** the URL string retrieved by the getUrl method  \n- **tenant** Sync URL specific to the tenant allocated for your Organization, e.g. *https://lsa-staging-sync.revenuegrid.com*\n- **eventToCreate** meeting's properties in JSON format. See the dedicated section of this article for details\n\n\n\n````\nglobal static void createOutlookEvent(Event eventToCreate, String accessToken, String tenant)\n{\ntry\n{\nHttpResponse resp = request\n(\ngetUrlMeeting(tenant),\n'POST',\ngetAuthHeader(accessToken),\ngetBody(eventToCreate, 'CREATE'),\n'meeting',\nnull,\n'SM001_getTimeSlotsMock'\n);\n}catch(Exception e)\n{\nsystem.debug('Error: '+e.getMessage()+' '+e.getStackTraceString());\n}\n}\n````\n&nbsp;\n\n* * *\n\n&nbsp;\n\n#### Method deleteOutlookEvent\n\n\nUse this method to delete calendar items in MS Exchange.\n\nMethod use sample:\n\n*Parameters*   \n\n- **accessToken** the *access_token* string acquired by {{ short_name }} Sync Engine to access MS Exchange data  **URL** the URL string retrieved by the getUrl method   \n- **eventToDelete** meeting's properties in JSON format. See the dedicated section of this article for details\n- **tenant** Sync URL specific to the tenant allocated for your Organization, e.g. *https://lsa-staging-sync.revenuegrid.com*\n\n\n\n````\nglobal static void deleteOutlookEvent(Event eventToDelete, String accessToken, String tenant)\n{\ntry\n{\nHttpResponse resp = request\n(\ngetUrlMeeting(tenant),\n'DELETE',\ngetAuthHeader(accessToken),\ngetBody(eventToDelete, 'DELETE'),\n'meeting',\nnull,\n'SM001_getTimeSlotsMock'\n);\n}catch(Exception e)\n{\nsystem.debug('Error: '+e.getMessage()+' '+e.getStackTraceString());\n}\n}\n````\n\n&nbsp;\n\n* * *\n\n&nbsp;\n\n#### Meeting parameters in JSON format\n\n**id** stands for the unique Item ID in the system. Same Id should be used consistently for the same calendar item.  \n**isRequired** is a true or false value that defines if an attendee is optional or required  \n**salesforceCorrelationId** an extra technical parameter which is generated by Salesforce, it may be used for troubleshooting purposes\n\n##### **Create item**\n\n````\n{\n\"id\":\"18p09032002jmvP11\",\n\"organizerEmail\":\"jadatran@contoso.com\",\n\"body\":\"Agenda: 1, 2, 3\",\n\"subject\":\"project progress update 2\",\n\"location\":\"Meeting Room 1\",\n\"startTime\":\"2022-02-04T01:00:00.000Z\",\n\"endTime\":\"2022-02-04T02:00:00.000Z\",\n\"salesforceCorrelationId\":\"16bf7d3b-2055-4f70-b\u043dfd-b0061a38ad1f\",\n\"attendees\":[\n{\n\"email\":\"jadatran@contoso.com\",\n\"isRequired\":\"true\"\n}\n]\n}\n\n````\n\n&nbsp;\n\n&nbsp;\n\n##### **Delete item**\n\n````\n{\n\"id\":\"08p09103202jmvP11\",\n\"organizerEmail\":\"jadatran@contoso.com\",\n\"attendees\":[\n\"jadatran@contoso.com\"\n]\n}\n\n````\n\n\n\n\n\n&nbsp;\n&nbsp;\n\n",
    "text_content": "description: Detailed explanation of how RG Email Sidebar establishes interaction with MS Exchange via a dedicated Apex class\nMS Exchange Integration via Apex Class\n For users of the Email Sidebar on: \n \n3 min read \n \n \n \nBesides custom API endpoints, {{ product_name }} can establish interaction with MS Exchange via a dedicated Apex class.\nMS Exchange calendar actions performed using Apex class methods\nRead, Create, Delete calendar items on MS Exchange servers. This also includes: attendees availability spans parsing from their calendars; adding a booked meeting into attendees' calendars; reserving chosen time slots \nChecking if the above listed actions were performed successfully; troubleshooting possible errors, e.g. Exchange data access issues \nSpecial notes:\nAll date and time properties in the calls and responses are set in the ISO 8601 standard: YYYY-MM-DDThh:mm:ssZ\nAll input and output dates and times are set in GMT time zone.\nAccess authorization token\nAccess authorization required to work with MS Exchange data is granted using an access_token acquired by {{ company_name }} Sync Engine.\nApex Class Methods (Revised)\nMethod getTimeSlotsFromOutlook\nUse this method to retrieve an access URL value required to perform actions on calendars.\nMethod use sample:\nParameters \nstartDateTime start of availability dates/time span defining the period during which a meeting is possible, e.g. 2020-10-15T00:00:00Z \nendDateTime end of availability dates/time span defining the period during which a meeting is possible, e.g. 2020-10-17T12:00:00Z \nemailsToCheckAvailability the list of email addresses whose calendar availability you want to retrieve. They should belong to your MS Exchange Org. Example:\n List emailsToCheckAvailability = new list { 'colleague1@mycompany.com' , 'colleague2@mycompany.com' } \naccessToken the access_token string acquired by {{ short_name }} Sync Engine to access MS Exchange data \ntenant Sync URL specific to the tenant allocated for your Organization, e.g. https://lsa-staging-sync.revenuegrid.com\n````\nglobal static void getTimeSlotsFromOutlook(Datetime startDateTime, Datetime endDateTime, List emailsToCheckAvailability, String accessToken, String tenant)\n{\nHttpResponse resp = request\n(\ngetUrl(startDateTime, endDateTime, tenant),\n'POST',\ngetAuthHeader(accessToken),\ngetBodyAvailability(emailsToCheckAvailability),\n'getTimeSlots',\nnull,\n'SM001_getTimeSlotsMock'\n);\nSystem.debug('resp.getBody()' + resp.getBody());\n}\n````\nMethod createOutlookEvent\nUse this method to create calendar items in MS Exchange.\nMethod use sample:\nParameters \naccessToken the access_token string acquired by {{ short_name }} Sync Engine to access MS Exchange data URL the URL string retrieved by the getUrl method \ntenant Sync URL specific to the tenant allocated for your Organization, e.g. https://lsa-staging-sync.revenuegrid.com\neventToCreate meeting's properties in JSON format. See the dedicated section of this article for details\nglobal static void createOutlookEvent(Event eventToCreate, String accessToken, String tenant)\n{\ntry\n{\nHttpResponse resp = request\n(\ngetUrlMeeting(tenant),\n'POST',\ngetAuthHeader(accessToken),\ngetBody(eventToCreate, 'CREATE'),\n'meeting',\nnull,\n'SM001_getTimeSlotsMock'\n);\n}catch(Exception e)\n{\nsystem.debug('Error: '+e.getMessage()+' '+e.getStackTraceString());\n}\n}\nMethod deleteOutlookEvent\nUse this method to delete calendar items in MS Exchange.\nMethod use sample:\nParameters \naccessToken the access_token string acquired by {{ short_name }} Sync Engine to access MS Exchange data URL the URL string retrieved by the getUrl method \neventToDelete meeting's properties in JSON format. See the dedicated section of this article for details\ntenant Sync URL specific to the tenant allocated for your Organization, e.g. https://lsa-staging-sync.revenuegrid.com\nglobal static void deleteOutlookEvent(Event eventToDelete, String accessToken, String tenant)\n{\ntry\n{\nHttpResponse resp = request\n(\ngetUrlMeeting(tenant),\n'DELETE',\ngetAuthHeader(accessToken),\ngetBody(eventToDelete, 'DELETE'),\n'meeting',\nnull,\n'SM001_getTimeSlotsMock'\n);\n}catch(Exception e)\n{\nsystem.debug('Error: '+e.getMessage()+' '+e.getStackTraceString());\n}\n}\nMeeting parameters in JSON format\nid stands for the unique Item ID in the system. Same Id should be used consistently for the same calendar item.\nisRequired is a true or false value that defines if an attendee is optional or required\nsalesforceCorrelationId an extra technical parameter which is generated by Salesforce, it may be used for troubleshooting purposes\nCreate item\n````\n{\n\"id\":\"18p09032002jmvP11\",\n\"organizerEmail\":\"jadatran@contoso.com\",\n\"body\":\"Agenda: 1, 2, 3\",\n\"subject\":\"project progress update 2\",\n\"location\":\"Meeting Room 1\",\n\"startTime\":\"2022-02-04T01:00:00.000Z\",\n\"endTime\":\"2022-02-04T02:00:00.000Z\",\n\"salesforceCorrelationId\":\"16bf7d3b-2055-4f70-b\u043dfd-b0061a38ad1f\",\n\"attendees\":[\n{\n\"email\":\"jadatran@contoso.com\",\n\"isRequired\":\"true\"\n}\n]\n}\n````\nDelete item\n````\n{\n\"id\":\"08p09103202jmvP11\",\n\"organizerEmail\":\"jadatran@contoso.com\",\n\"attendees\":[\n\"jadatran@contoso.com\"\n]\n}\n````"
}